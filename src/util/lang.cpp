#pragma once
#include "lang.h"
#include "Settings.h"
#include "util.h"
#include <fmt/format.h>

/*
; newbspguy language file generated by script
;
; Can be used LANG_0000 for indexed from 0000 to 9999 (Enum in lang_defs.h, using get_localized_string(LANG_0000))
; or custom names like LANG_FILE, using get_localized_string("LANG_FILE")
;
*/

inih::INIReader * ft = NULL;

std::map<int, std::string> lang_db;
std::map<std::string, std::string> lang_db_str;

std::string get_localized_string(int id)
{
	if (ft == NULL)
	{
		// Init language if needed
		set_localize_lang("EN");
	}
	if (ft != NULL)
	{
		std::map<int, std::string>::iterator itr = lang_db.find(id);

		if (itr == lang_db.end())
		{
			std::string value = ft->Get<std::string>(g_settings.language, fmt::format("LANG_{:04}", id), fmt::format("NO LANG_{:04}", id));
			replaceAll(value, "\\n", "\n");
			lang_db[id] = value;
			return value;
		}

		return itr->second;
	}
	return "LANG_ERROR_INDEX";
}

std::string get_localized_string(const std::string & str_id)
{
	if (ft == NULL)
	{
		// Init language if needed
		set_localize_lang("EN");
	}
	if (ft != NULL)
	{
		std::map<std::string, std::string>::iterator itr = lang_db_str.find(str_id);

		if (itr == lang_db_str.end())
		{
			std::string value = ft->Get<std::string>(g_settings.language, str_id, fmt::format("NO {}", str_id));
			replaceAll(value, "\\n", "\n");
			lang_db_str[str_id] = value;
			return value;
		}

		return itr->second;
	}
	return "LANG_ERROR_STRING";
}

void set_localize_lang(std::string lang)
{
	if (ft != NULL)
	{
		delete ft;
	}

	try
	{
		ft = new inih::INIReader(g_config_dir + "language.ini");
	}
	catch(std::runtime_error runtime)
	{
		logf("Language parse fatal error: {}", runtime.what());
	}
	g_settings.language = lang;
	lang_db.clear();
	lang_db_str.clear();
}