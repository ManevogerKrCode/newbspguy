#pragma once
#include "lang.h"
#include "Settings.h"
#include "log.h"

#include <fmt/format.h>

/*
; newbspguy language file generated by script
;
; Can be used LANG_0000 for indexed from 0000 to 9999 (Enum in lang_defs.h, using get_localized_string(LANG_0000))
; or custom names like LANG_FILE, using get_localized_string("LANG_FILE")
;
*/

inih::INIReader* lang_ini = NULL;

std::map<int, std::string> lang_db;
std::map<std::string, std::string> lang_db_str;

std::string get_localized_string(int id)
{
	if (lang_ini == NULL)
	{
		// Init language if needed
		set_localize_lang("EN");
	}
	if (lang_ini != NULL)
	{
		std::map<int, std::string>::iterator itr = lang_db.find(id);

		if (itr == lang_db.end())
		{
			std::string value = fmt::format("NO LANG_{:04}", id);
			try
			{
				std::string tmp_value = lang_ini->Get<std::string>(g_settings.selected_lang, fmt::format("LANG_{:04}", id), fmt::format("NO LANG_{:04}", id));
				replaceAll(tmp_value, "\\n", "\n");
				replaceAll(tmp_value, "\\r", "\r");

				value = tmp_value;
			}
			catch(...)
			{

			}
			lang_db[id] = value;
			return value;
		}

		return itr->second;
	}
	return "LANG_ERROR_INDEX\n";
}

std::string get_localized_string(const std::string& str_id)
{
	if (lang_ini == NULL)
	{
		// Init language if needed
		set_localize_lang("EN");
	}
	if (lang_ini != NULL)
	{
		std::map<std::string, std::string>::iterator itr = lang_db_str.find(str_id);

		if (itr == lang_db_str.end())
		{
			std::string value = fmt::format("NO {}", str_id);
			try
			{
				std::string tmp_value = lang_ini->Get<std::string>(g_settings.selected_lang, str_id, fmt::format("NO {}", str_id));
				replaceAll(tmp_value, "\\n", "\n");
				replaceAll(tmp_value, "\\r", "\r");
				value = tmp_value;
			}
			catch (...)
			{

			}
			lang_db_str[str_id] = value;
			return value;
		}

		return itr->second;
	}
	return "LANG_ERROR_STRING\n";
}

void set_localize_lang(std::string lang)
{
	static std::string last_lang = "";

	if (last_lang != lang)
	{
		if (lang_ini != NULL)
		{
			delete lang_ini;
			lang_ini = NULL;
		}
		// Search lang file in config/current directories
		std::string langfile = "./languages/language_" + toLowerCase(lang) + ".ini";
		if (!fileExists(langfile))
		{
			langfile = "./languages/language.ini";
		}
		if (!fileExists(langfile))
		{
			print_log(PRINT_RED | PRINT_INTENSITY, "Fatal error. Language file not found!");
		}
		else
		{
			try
			{
				lang_ini = new inih::INIReader(langfile);
			}
			catch (std::runtime_error & runtime)
			{
				print_log(PRINT_RED | PRINT_INTENSITY, "Language parse from {} fatal error: {}\n", langfile, runtime.what());
			}
		}
		last_lang = lang;
	}
	g_settings.selected_lang = lang;
	lang_db.clear();
	lang_db_str.clear();
}