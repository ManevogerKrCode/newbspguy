#pragma once
#include <cstring>
#include <string>
#include "bsplimits.h"
#include "bsptypes.h"

#pragma pack(push, 1)

COLOR3 operator*(COLOR3 v, float f);
bool operator==(COLOR3 c1, COLOR3 c2);

COLOR4 operator*(COLOR4 v, float f);
bool operator==(COLOR4 c1, COLOR4 c2);

struct WADHEADER
{
	char szMagic[4];    // should be WAD2/WAD3
	int nDir;			// number of directory entries
	int nDirOffset;		// offset into directories
};

struct WADDIRENTRY
{
	int nFilePos;				 // offset in WAD
	int nDiskSize;				 // size in file
	int nSize;					 // uncompressed size
	char nType;					 // type of entry
	bool bCompression;           // 0 if none
	short nDummy;				 // not used
	char szName[MAXTEXTURENAME]; // must be null terminated
};

struct WADTEX
{
	char szName[MAXTEXTURENAME];
	unsigned int nWidth, nHeight;
	unsigned int nOffsets[MIPLEVELS];
	unsigned char* data; // all mip-maps and pallete
	bool needclean = false;
	WADTEX()
	{
		needclean = false;
		szName[0] = '\0';
		data = NULL;
		nWidth = nHeight = 0;
		nOffsets[0] = nOffsets[1] = nOffsets[2] = nOffsets[3] = 0;
	}
	WADTEX(BSPMIPTEX* tex)
	{
		needclean = false;
		memcpy(szName, tex->szName, MAXTEXTURENAME);

		nWidth = tex->nWidth;
		nHeight = tex->nHeight;
		for (int i = 0; i < MIPLEVELS; i++)
			nOffsets[i] = tex->nOffsets[i];

		if (nOffsets[0] <= 0)
		{
			data = NULL;
			return;
		}
		int w = tex->nWidth;
		int h = tex->nHeight;
		int sz = w * h;	   // miptex 0
		int sz2 = sz / 4;  // miptex 1
		int sz3 = sz2 / 4; // miptex 2
		int sz4 = sz3 / 4; // miptex 3
		int szAll = sz + sz2 + sz3 + sz4 + 2 + 256 * 3 + 2;
		data = new unsigned char[szAll];
		unsigned char* texdata = (unsigned char*)(((unsigned char*)tex) + tex->nOffsets[0]);
		memcpy(data, texdata, szAll);
		needclean = true;
	}
	~WADTEX()
	{
		if (needclean)
			delete[] data;
		needclean = false;
		szName[0] = '\0';
		data = NULL;
		nWidth = nHeight = 0;
		nOffsets[0] = nOffsets[1] = nOffsets[2] = nOffsets[3] = 0;
	}
};

#pragma pack(pop)


class Wad
{
public:
	std::string filename = std::string();

	unsigned char* filedata = NULL;
	int fileLen = 0;
	bool usableTextures = false;

	WADHEADER header = WADHEADER();

	std::vector<WADDIRENTRY> dirEntries = std::vector<WADDIRENTRY>();

	Wad(const std::string& file);
	Wad(void);

	~Wad(void);

	bool readInfo();

	bool hasTexture(int dirIndex);
	bool hasTexture(const std::string& name);

	bool write(const std::string& filename, std::vector<WADTEX*> textures);
	bool write(WADTEX** textures, size_t numTex);
	bool write(std::vector<WADTEX*> textures);

	WADTEX* readTexture(int dirIndex, int* texturetype = NULL);
	WADTEX* readTexture(const std::string& texname, int* texturetype = NULL);
};

WADTEX* create_wadtex(const char* name, COLOR3* data, int width, int height);
COLOR3* ConvertWadTexToRGB(WADTEX* wadTex, COLOR3* palette = NULL);
COLOR3* ConvertMipTexToRGB(BSPMIPTEX* wadTex, COLOR3* palette = NULL);
COLOR4* ConvertWadTexToRGBA(WADTEX* wadTex, COLOR3* palette = NULL);
COLOR4* ConvertMipTexToRGBA(BSPMIPTEX* tex, COLOR3 * palette = NULL);

const unsigned char quakeDefaultPalette[] = {
	0x00, 0x00, 0x00, 0x0f, 0x0f, 0x0f, 0x1f, 0x1f,
		0x1f, 0x2f, 0x2f, 0x2f, 0x3f, 0x3f, 0x3f, 0x4b,
		0x4b, 0x4b, 0x5b, 0x5b, 0x5b, 0x6b, 0x6b, 0x6b,
		0x7b, 0x7b, 0x7b, 0x8b, 0x8b, 0x8b, 0x9b, 0x9b,
		0x9b, 0xab, 0xab, 0xab, 0xbb, 0xbb, 0xbb, 0xcb,
		0xcb, 0xcb, 0xdb, 0xdb, 0xdb, 0xeb, 0xeb, 0xeb,
		0x0f, 0x0b, 0x07, 0x17, 0x0f, 0x0b, 0x1f, 0x17,
		0x0b, 0x27, 0x1b, 0x0f, 0x2f, 0x23, 0x13, 0x37,
		0x2b, 0x17, 0x3f, 0x2f, 0x17, 0x4b, 0x37, 0x1b,
		0x53, 0x3b, 0x1b, 0x5b, 0x43, 0x1f, 0x63, 0x4b,
		0x1f, 0x6b, 0x53, 0x1f, 0x73, 0x57, 0x1f, 0x7b,
		0x5f, 0x23, 0x83, 0x67, 0x23, 0x8f, 0x6f, 0x23,
		0x0b, 0x0b, 0x0f, 0x13, 0x13, 0x1b, 0x1b, 0x1b,
		0x27, 0x27, 0x27, 0x33, 0x2f, 0x2f, 0x3f, 0x37,
		0x37, 0x4b, 0x3f, 0x3f, 0x57, 0x47, 0x47, 0x67,
		0x4f, 0x4f, 0x73, 0x5b, 0x5b, 0x7f, 0x63, 0x63,
		0x8b, 0x6b, 0x6b, 0x97, 0x73, 0x73, 0xa3, 0x7b,
		0x7b, 0xaf, 0x83, 0x83, 0xbb, 0x8b, 0x8b, 0xcb,
		0x00, 0x00, 0x00, 0x07, 0x07, 0x00, 0x0b, 0x0b,
		0x00, 0x13, 0x13, 0x00, 0x1b, 0x1b, 0x00, 0x23,
		0x23, 0x00, 0x2b, 0x2b, 0x07, 0x2f, 0x2f, 0x07,
		0x37, 0x37, 0x07, 0x3f, 0x3f, 0x07, 0x47, 0x47,
		0x07, 0x4b, 0x4b, 0x0b, 0x53, 0x53, 0x0b, 0x5b,
		0x5b, 0x0b, 0x63, 0x63, 0x0b, 0x6b, 0x6b, 0x0f,
		0x07, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x17, 0x00,
		0x00, 0x1f, 0x00, 0x00, 0x27, 0x00, 0x00, 0x2f,
		0x00, 0x00, 0x37, 0x00, 0x00, 0x3f, 0x00, 0x00,
		0x47, 0x00, 0x00, 0x4f, 0x00, 0x00, 0x57, 0x00,
		0x00, 0x5f, 0x00, 0x00, 0x67, 0x00, 0x00, 0x6f,
		0x00, 0x00, 0x77, 0x00, 0x00, 0x7f, 0x00, 0x00,
		0x13, 0x13, 0x00, 0x1b, 0x1b, 0x00, 0x23, 0x23,
		0x00, 0x2f, 0x2b, 0x00, 0x37, 0x2f, 0x00, 0x43,
		0x37, 0x00, 0x4b, 0x3b, 0x07, 0x57, 0x43, 0x07,
		0x5f, 0x47, 0x07, 0x6b, 0x4b, 0x0b, 0x77, 0x53,
		0x0f, 0x83, 0x57, 0x13, 0x8b, 0x5b, 0x13, 0x97,
		0x5f, 0x1b, 0xa3, 0x63, 0x1f, 0xaf, 0x67, 0x23,
		0x23, 0x13, 0x07, 0x2f, 0x17, 0x0b, 0x3b, 0x1f,
		0x0f, 0x4b, 0x23, 0x13, 0x57, 0x2b, 0x17, 0x63,
		0x2f, 0x1f, 0x73, 0x37, 0x23, 0x7f, 0x3b, 0x2b,
		0x8f, 0x43, 0x33, 0x9f, 0x4f, 0x33, 0xaf, 0x63,
		0x2f, 0xbf, 0x77, 0x2f, 0xcf, 0x8f, 0x2b, 0xdf,
		0xab, 0x27, 0xef, 0xcb, 0x1f, 0xff, 0xf3, 0x1b,
		0x0b, 0x07, 0x00, 0x1b, 0x13, 0x00, 0x2b, 0x23,
		0x0f, 0x37, 0x2b, 0x13, 0x47, 0x33, 0x1b, 0x53,
		0x37, 0x23, 0x63, 0x3f, 0x2b, 0x6f, 0x47, 0x33,
		0x7f, 0x53, 0x3f, 0x8b, 0x5f, 0x47, 0x9b, 0x6b,
		0x53, 0xa7, 0x7b, 0x5f, 0xb7, 0x87, 0x6b, 0xc3,
		0x93, 0x7b, 0xd3, 0xa3, 0x8b, 0xe3, 0xb3, 0x97,
		0xab, 0x8b, 0xa3, 0x9f, 0x7f, 0x97, 0x93, 0x73,
		0x87, 0x8b, 0x67, 0x7b, 0x7f, 0x5b, 0x6f, 0x77,
		0x53, 0x63, 0x6b, 0x4b, 0x57, 0x5f, 0x3f, 0x4b,
		0x57, 0x37, 0x43, 0x4b, 0x2f, 0x37, 0x43, 0x27,
		0x2f, 0x37, 0x1f, 0x23, 0x2b, 0x17, 0x1b, 0x23,
		0x13, 0x13, 0x17, 0x0b, 0x0b, 0x0f, 0x07, 0x07,
		0xbb, 0x73, 0x9f, 0xaf, 0x6b, 0x8f, 0xa3, 0x5f,
		0x83, 0x97, 0x57, 0x77, 0x8b, 0x4f, 0x6b, 0x7f,
		0x4b, 0x5f, 0x73, 0x43, 0x53, 0x6b, 0x3b, 0x4b,
		0x5f, 0x33, 0x3f, 0x53, 0x2b, 0x37, 0x47, 0x23,
		0x2b, 0x3b, 0x1f, 0x23, 0x2f, 0x17, 0x1b, 0x23,
		0x13, 0x13, 0x17, 0x0b, 0x0b, 0x0f, 0x07, 0x07,
		0xdb, 0xc3, 0xbb, 0xcb, 0xb3, 0xa7, 0xbf, 0xa3,
		0x9b, 0xaf, 0x97, 0x8b, 0xa3, 0x87, 0x7b, 0x97,
		0x7b, 0x6f, 0x87, 0x6f, 0x5f, 0x7b, 0x63, 0x53,
		0x6b, 0x57, 0x47, 0x5f, 0x4b, 0x3b, 0x53, 0x3f,
		0x33, 0x43, 0x33, 0x27, 0x37, 0x2b, 0x1f, 0x27,
		0x1f, 0x17, 0x1b, 0x13, 0x0f, 0x0f, 0x0b, 0x07,
		0x6f, 0x83, 0x7b, 0x67, 0x7b, 0x6f, 0x5f, 0x73,
		0x67, 0x57, 0x6b, 0x5f, 0x4f, 0x63, 0x57, 0x47,
		0x5b, 0x4f, 0x3f, 0x53, 0x47, 0x37, 0x4b, 0x3f,
		0x2f, 0x43, 0x37, 0x2b, 0x3b, 0x2f, 0x23, 0x33,
		0x27, 0x1f, 0x2b, 0x1f, 0x17, 0x23, 0x17, 0x0f,
		0x1b, 0x13, 0x0b, 0x13, 0x0b, 0x07, 0x0b, 0x07,
		0xff, 0xf3, 0x1b, 0xef, 0xdf, 0x17, 0xdb, 0xcb,
		0x13, 0xcb, 0xb7, 0x0f, 0xbb, 0xa7, 0x0f, 0xab,
		0x97, 0x0b, 0x9b, 0x83, 0x07, 0x8b, 0x73, 0x07,
		0x7b, 0x63, 0x07, 0x6b, 0x53, 0x00, 0x5b, 0x47,
		0x00, 0x4b, 0x37, 0x00, 0x3b, 0x2b, 0x00, 0x2b,
		0x1f, 0x00, 0x1b, 0x0f, 0x00, 0x0b, 0x07, 0x00,
		0x00, 0x00, 0xff, 0x0b, 0x0b, 0xef, 0x13, 0x13,
		0xdf, 0x1b, 0x1b, 0xcf, 0x23, 0x23, 0xbf, 0x2b,
		0x2b, 0xaf, 0x2f, 0x2f, 0x9f, 0x2f, 0x2f, 0x8f,
		0x2f, 0x2f, 0x7f, 0x2f, 0x2f, 0x6f, 0x2f, 0x2f,
		0x5f, 0x2b, 0x2b, 0x4f, 0x23, 0x23, 0x3f, 0x1b,
		0x1b, 0x2f, 0x13, 0x13, 0x1f, 0x0b, 0x0b, 0x0f,
		0x2b, 0x00, 0x00, 0x3b, 0x00, 0x00, 0x4b, 0x07,
		0x00, 0x5f, 0x07, 0x00, 0x6f, 0x0f, 0x00, 0x7f,
		0x17, 0x07, 0x93, 0x1f, 0x07, 0xa3, 0x27, 0x0b,
		0xb7, 0x33, 0x0f, 0xc3, 0x4b, 0x1b, 0xcf, 0x63,
		0x2b, 0xdb, 0x7f, 0x3b, 0xe3, 0x97, 0x4f, 0xe7,
		0xab, 0x5f, 0xef, 0xbf, 0x77, 0xf7, 0xd3, 0x8b,
		0xa7, 0x7b, 0x3b, 0xb7, 0x9b, 0x37, 0xc7, 0xc3,
		0x37, 0xe7, 0xe3, 0x57, 0x7f, 0xbf, 0xff, 0xab,
		0xe7, 0xff, 0xd7, 0xff, 0xff, 0x67, 0x00, 0x00,
		0x8b, 0x00, 0x00, 0xb3, 0x00, 0x00, 0xd7, 0x00,
		0x00, 0xff, 0x00, 0x00, 0xff, 0xf3, 0x93, 0xff,
		0xf7, 0xc7, 0xff, 0xff, 0xff, 0x9f, 0x5b, 0x53 };
